
On_Demand_Traffic_light_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000cc6  2**0
                  ALLOC
  2 .stab         00000f18  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000599  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1e 06 	call	0xc3c	; 0xc3c <main>
  74:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <AppInit>:
#include "App.h"

u8 Flag,STATE;

void AppInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/*Interrupt initialization*/
	INT_voidGlobalInterrupt();
  84:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <INT_voidGlobalInterrupt>
	INT0_voidInit();
  88:	0e 94 06 05 	call	0xa0c	; 0xa0c <INT0_voidInit>
	INT0_voidEnable();
  8c:	0e 94 1b 05 	call	0xa36	; 0xa36 <INT0_voidEnable>
	INT0_voidCallBack(&ISR_Pedestrian);
  90:	85 ef       	ldi	r24, 0xF5	; 245
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 37 05 	call	0xa6e	; 0xa6e <INT0_voidCallBack>

	/*Traffic Light LEDS*/
	DIO_voidSetDirectionPin(DIO_PORTA,PIN1,OUTPUT);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>
	DIO_voidSetDirectionPin(DIO_PORTA,PIN0,OUTPUT);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>
	DIO_voidSetDirectionPin(DIO_PORTA,PIN2,OUTPUT);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>
	DIO_voidSetDirectionPin(DIO_PORTC,PIN0,OUTPUT);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>
	DIO_voidSetDirectionPin(DIO_PORTC,PIN1,OUTPUT);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>
	DIO_voidSetDirectionPin(DIO_PORTC,PIN2,OUTPUT);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>

	/*pedestrian Button*/
	DIO_voidSetDirectionPin(DIO_PORTD,PIN2,INPUT);
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_voidSetDirectionPin>
	DIO_voidPullUPPin(DIO_PORTD,PIN2);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	0e 94 b3 03 	call	0x766	; 0x766 <DIO_voidPullUPPin>

	/*pedestrian Red LED*/
	DIO_voidSetvaluePin(DIO_PORTC,PIN0,HIGH);
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>

}
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <AppStart>:

void AppStart(void)
{
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	00 d0       	rcall	.+0      	; 0xfc <AppStart+0x6>
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	STATE=0;
 100:	10 92 64 00 	sts	0x0064, r1
	/* Car Red LED */
	Flag = STATE_ONE;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 65 00 	sts	0x0065, r24
	DIO_voidSetvaluePin(DIO_PORTA,PIN0,HIGH);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	Timer_voidDelayms(5000);
 114:	68 e8       	ldi	r22, 0x88	; 136
 116:	73 e1       	ldi	r23, 0x13	; 19
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
	DIO_voidSetvaluePin(DIO_PORTA,PIN0,LOW);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>


	/*Car Yellow LED */
	for (u8 Counter=0;Counter<10;Counter++)
 12a:	1a 82       	std	Y+2, r1	; 0x02
 12c:	19 c0       	rjmp	.+50     	; 0x160 <AppStart+0x6a>
	{
		Flag = STATE_THREE;
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	80 93 65 00 	sts	0x0065, r24
		Toggle_Bit(STATE,0);
 134:	90 91 64 00 	lds	r25, 0x0064
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	89 27       	eor	r24, r25
 13c:	80 93 64 00 	sts	0x0064, r24
		DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
 140:	90 91 64 00 	lds	r25, 0x0064
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	49 2f       	mov	r20, r25
 14a:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
		Timer_voidDelayms(500);
 14e:	64 ef       	ldi	r22, 0xF4	; 244
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
	Timer_voidDelayms(5000);
	DIO_voidSetvaluePin(DIO_PORTA,PIN0,LOW);


	/*Car Yellow LED */
	for (u8 Counter=0;Counter<10;Counter++)
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	8a 83       	std	Y+2, r24	; 0x02
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	20 f3       	brcs	.-56     	; 0x12e <AppStart+0x38>
		Flag = STATE_THREE;
		Toggle_Bit(STATE,0);
		DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
		Timer_voidDelayms(500);
	}
	DIO_voidSetvaluePin(DIO_PORTA,PIN1,LOW);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	STATE=0;
 170:	10 92 64 00 	sts	0x0064, r1

	/*Car Green LED*/
	Flag = STATE_TWO;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 65 00 	sts	0x0065, r24
	DIO_voidSetvaluePin(DIO_PORTA,PIN2,HIGH);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	Timer_voidDelayms(5000);
 184:	68 e8       	ldi	r22, 0x88	; 136
 186:	73 e1       	ldi	r23, 0x13	; 19
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
	DIO_voidSetvaluePin(DIO_PORTA,PIN2,LOW);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>

	/*Car Yellow LED */
	for (u8 Counter=0;Counter<10;Counter++)
 19a:	19 82       	std	Y+1, r1	; 0x01
 19c:	19 c0       	rjmp	.+50     	; 0x1d0 <AppStart+0xda>
	{
		Flag = STATE_THREE;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	80 93 65 00 	sts	0x0065, r24
		Toggle_Bit(STATE,0);
 1a4:	90 91 64 00 	lds	r25, 0x0064
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	89 27       	eor	r24, r25
 1ac:	80 93 64 00 	sts	0x0064, r24
		DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
 1b0:	90 91 64 00 	lds	r25, 0x0064
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	49 2f       	mov	r20, r25
 1ba:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
		Timer_voidDelayms(500);
 1be:	64 ef       	ldi	r22, 0xF4	; 244
 1c0:	71 e0       	ldi	r23, 0x01	; 1
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
	DIO_voidSetvaluePin(DIO_PORTA,PIN2,HIGH);
	Timer_voidDelayms(5000);
	DIO_voidSetvaluePin(DIO_PORTA,PIN2,LOW);

	/*Car Yellow LED */
	for (u8 Counter=0;Counter<10;Counter++)
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	8a 30       	cpi	r24, 0x0A	; 10
 1d4:	20 f3       	brcs	.-56     	; 0x19e <AppStart+0xa8>
		Flag = STATE_THREE;
		Toggle_Bit(STATE,0);
		DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
		Timer_voidDelayms(500);
	}
	DIO_voidSetvaluePin(DIO_PORTA,PIN1,LOW);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
}
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <ISR_Pedestrian>:

void ISR_Pedestrian (void)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <ISR_Pedestrian+0x6>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
	Timer_voidDelayms(250);
 1f4:	6a ef       	ldi	r22, 0xFA	; 250
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
	if (DIO_voidReadvaluePin(DIO_PORTD,PIN2)){
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidReadvaluePin>
 208:	88 23       	and	r24, r24
 20a:	09 f4       	brne	.+2      	; 0x20e <ISR_Pedestrian+0x24>
 20c:	a7 c0       	rjmp	.+334    	; 0x35c <ISR_Pedestrian+0x172>
	INT0_voidDisable();
 20e:	0e 94 29 05 	call	0xa52	; 0xa52 <INT0_voidDisable>
	switch (Flag)
 212:	80 91 65 00 	lds	r24, 0x0065
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	91 05       	cpc	r25, r1
 21e:	89 f4       	brne	.+34     	; 0x242 <ISR_Pedestrian+0x58>
	{
	case STATE_ONE:
		DIO_voidSetvaluePin(DIO_PORTC,PIN0,LOW);
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
		DIO_voidSetvaluePin(DIO_PORTC,PIN2,HIGH);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
		Timer_voidDelayms(5000);
 234:	68 e8       	ldi	r22, 0x88	; 136
 236:	73 e1       	ldi	r23, 0x13	; 19
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
 240:	48 c0       	rjmp	.+144    	; 0x2d2 <ISR_Pedestrian+0xe8>
		break;

		default:
			DIO_voidSetvaluePin(DIO_PORTC,PIN0,HIGH); // PED RED ON
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
			DIO_voidSetvaluePin(DIO_PORTA,PIN2,LOW);  // CAR GREEN OFF
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
			STATE=0;
 256:	10 92 64 00 	sts	0x0064, r1
			/*Car and pedestrian Yellow LED */
			for (u8 Counter=0;Counter<10;Counter++)
 25a:	1a 82       	std	Y+2, r1	; 0x02
 25c:	1d c0       	rjmp	.+58     	; 0x298 <ISR_Pedestrian+0xae>
			{
				Toggle_Bit(STATE,0);
 25e:	90 91 64 00 	lds	r25, 0x0064
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	89 27       	eor	r24, r25
 266:	80 93 64 00 	sts	0x0064, r24
				DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
 26a:	90 91 64 00 	lds	r25, 0x0064
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	49 2f       	mov	r20, r25
 274:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
				DIO_voidSetvaluePin(DIO_PORTC,PIN1,STATE);
 278:	90 91 64 00 	lds	r25, 0x0064
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	49 2f       	mov	r20, r25
 282:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
				Timer_voidDelayms(500);
 286:	64 ef       	ldi	r22, 0xF4	; 244
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
		default:
			DIO_voidSetvaluePin(DIO_PORTC,PIN0,HIGH); // PED RED ON
			DIO_voidSetvaluePin(DIO_PORTA,PIN2,LOW);  // CAR GREEN OFF
			STATE=0;
			/*Car and pedestrian Yellow LED */
			for (u8 Counter=0;Counter<10;Counter++)
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	8a 83       	std	Y+2, r24	; 0x02
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	8a 30       	cpi	r24, 0x0A	; 10
 29c:	00 f3       	brcs	.-64     	; 0x25e <ISR_Pedestrian+0x74>
				Toggle_Bit(STATE,0);
				DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
				DIO_voidSetvaluePin(DIO_PORTC,PIN1,STATE);
				Timer_voidDelayms(500);
			}
			DIO_voidSetvaluePin(DIO_PORTC,PIN0,LOW);
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
			DIO_voidSetvaluePin(DIO_PORTA,PIN0,HIGH);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
			DIO_voidSetvaluePin(DIO_PORTC,PIN2,HIGH);
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
			Timer_voidDelayms(5000);
 2bc:	68 e8       	ldi	r22, 0x88	; 136
 2be:	73 e1       	ldi	r23, 0x13	; 19
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
			DIO_voidSetvaluePin(DIO_PORTA,PIN0,LOW);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
			break;
		}
	DIO_voidSetvaluePin(DIO_PORTA,PIN0,LOW);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	STATE=0;
 2dc:	10 92 64 00 	sts	0x0064, r1
	/*Car and pedestrian Yellow LED */
	for (u8 Counter=0;Counter<10;Counter++)
 2e0:	19 82       	std	Y+1, r1	; 0x01
 2e2:	1d c0       	rjmp	.+58     	; 0x31e <ISR_Pedestrian+0x134>
	{
		Toggle_Bit(STATE,0);
 2e4:	90 91 64 00 	lds	r25, 0x0064
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	89 27       	eor	r24, r25
 2ec:	80 93 64 00 	sts	0x0064, r24
		DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
 2f0:	90 91 64 00 	lds	r25, 0x0064
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	49 2f       	mov	r20, r25
 2fa:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
		DIO_voidSetvaluePin(DIO_PORTC,PIN1,STATE);
 2fe:	90 91 64 00 	lds	r25, 0x0064
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	49 2f       	mov	r20, r25
 308:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
		Timer_voidDelayms(500);
 30c:	64 ef       	ldi	r22, 0xF4	; 244
 30e:	71 e0       	ldi	r23, 0x01	; 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
			break;
		}
	DIO_voidSetvaluePin(DIO_PORTA,PIN0,LOW);
	STATE=0;
	/*Car and pedestrian Yellow LED */
	for (u8 Counter=0;Counter<10;Counter++)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	8a 30       	cpi	r24, 0x0A	; 10
 322:	00 f3       	brcs	.-64     	; 0x2e4 <ISR_Pedestrian+0xfa>
		Toggle_Bit(STATE,0);
		DIO_voidSetvaluePin(DIO_PORTA,PIN1,STATE);
		DIO_voidSetvaluePin(DIO_PORTC,PIN1,STATE);
		Timer_voidDelayms(500);
	}
	DIO_voidSetvaluePin(DIO_PORTC,PIN2,LOW);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	DIO_voidSetvaluePin(DIO_PORTA,PIN2,HIGH);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	DIO_voidSetvaluePin(DIO_PORTC,PIN0,HIGH);
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	Timer_voidDelayms(5000);
 342:	68 e8       	ldi	r22, 0x88	; 136
 344:	73 e1       	ldi	r23, 0x13	; 19
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timer_voidDelayms>
	DIO_voidSetvaluePin(DIO_PORTA,PIN2,LOW);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_voidSetvaluePin>
	INT0_voidEnable();}
 358:	0e 94 1b 05 	call	0xa36	; 0xa36 <INT0_voidEnable>
	else
	{}
}
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	08 95       	ret

00000366 <DIO_voidSetDirectionPin>:
#include "DIO_Registers.h"
#include "DIO_CONFIG.h"
#include "DIO_Interface.h"

void DIO_voidSetDirectionPin(u8 Copy_u8PORT , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	27 97       	sbiw	r28, 0x07	; 7
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	6a 83       	std	Y+2, r22	; 0x02
 37e:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == OUTPUT)
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_voidSetDirectionPin+0x22>
 386:	6f c0       	rjmp	.+222    	; 0x466 <DIO_voidSetDirectionPin+0x100>
	{
		switch (Copy_u8PORT)
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	3f 83       	std	Y+7, r19	; 0x07
 390:	2e 83       	std	Y+6, r18	; 0x06
 392:	8e 81       	ldd	r24, Y+6	; 0x06
 394:	9f 81       	ldd	r25, Y+7	; 0x07
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	91 05       	cpc	r25, r1
 39a:	49 f1       	breq	.+82     	; 0x3ee <DIO_voidSetDirectionPin+0x88>
 39c:	2e 81       	ldd	r18, Y+6	; 0x06
 39e:	3f 81       	ldd	r19, Y+7	; 0x07
 3a0:	22 30       	cpi	r18, 0x02	; 2
 3a2:	31 05       	cpc	r19, r1
 3a4:	2c f4       	brge	.+10     	; 0x3b0 <DIO_voidSetDirectionPin+0x4a>
 3a6:	8e 81       	ldd	r24, Y+6	; 0x06
 3a8:	9f 81       	ldd	r25, Y+7	; 0x07
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <DIO_voidSetDirectionPin+0x60>
 3ae:	d2 c0       	rjmp	.+420    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
 3b0:	2e 81       	ldd	r18, Y+6	; 0x06
 3b2:	3f 81       	ldd	r19, Y+7	; 0x07
 3b4:	22 30       	cpi	r18, 0x02	; 2
 3b6:	31 05       	cpc	r19, r1
 3b8:	71 f1       	breq	.+92     	; 0x416 <DIO_voidSetDirectionPin+0xb0>
 3ba:	8e 81       	ldd	r24, Y+6	; 0x06
 3bc:	9f 81       	ldd	r25, Y+7	; 0x07
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	91 05       	cpc	r25, r1
 3c2:	e9 f1       	breq	.+122    	; 0x43e <DIO_voidSetDirectionPin+0xd8>
 3c4:	c7 c0       	rjmp	.+398    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
		{
		case DIO_PORTA:
			Set_Bit(DDRA,Copy_u8Pin);
 3c6:	aa e3       	ldi	r26, 0x3A	; 58
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	ea e3       	ldi	r30, 0x3A	; 58
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	48 2f       	mov	r20, r24
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 2e       	mov	r0, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_voidSetDirectionPin+0x7e>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_voidSetDirectionPin+0x7a>
 3e8:	84 2b       	or	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	b3 c0       	rjmp	.+358    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
			break;

		case DIO_PORTB:
			Set_Bit(DDRB,Copy_u8Pin);
 3ee:	a7 e3       	ldi	r26, 0x37	; 55
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e7 e3       	ldi	r30, 0x37	; 55
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_voidSetDirectionPin+0xa6>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_voidSetDirectionPin+0xa2>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
 414:	9f c0       	rjmp	.+318    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
			break;

		case DIO_PORTC:
			Set_Bit(DDRC,Copy_u8Pin);
 416:	a4 e3       	ldi	r26, 0x34	; 52
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e4 e3       	ldi	r30, 0x34	; 52
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_voidSetDirectionPin+0xce>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_voidSetDirectionPin+0xca>
 438:	84 2b       	or	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	8b c0       	rjmp	.+278    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
			break;

		case DIO_PORTD:
			Set_Bit(DDRD,Copy_u8Pin);
 43e:	a1 e3       	ldi	r26, 0x31	; 49
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	e1 e3       	ldi	r30, 0x31	; 49
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 2e       	mov	r0, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_voidSetDirectionPin+0xf6>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_voidSetDirectionPin+0xf2>
 460:	84 2b       	or	r24, r20
 462:	8c 93       	st	X, r24
 464:	77 c0       	rjmp	.+238    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>

		default:
			break;
		}
	}
		else if (Copy_u8Direction == INPUT)
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	88 23       	and	r24, r24
 46a:	09 f0       	breq	.+2      	; 0x46e <DIO_voidSetDirectionPin+0x108>
 46c:	73 c0       	rjmp	.+230    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
		{
			switch (Copy_u8PORT)
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	3d 83       	std	Y+5, r19	; 0x05
 476:	2c 83       	std	Y+4, r18	; 0x04
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	9d 81       	ldd	r25, Y+5	; 0x05
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	91 05       	cpc	r25, r1
 480:	59 f1       	breq	.+86     	; 0x4d8 <DIO_voidSetDirectionPin+0x172>
 482:	2c 81       	ldd	r18, Y+4	; 0x04
 484:	3d 81       	ldd	r19, Y+5	; 0x05
 486:	22 30       	cpi	r18, 0x02	; 2
 488:	31 05       	cpc	r19, r1
 48a:	2c f4       	brge	.+10     	; 0x496 <DIO_voidSetDirectionPin+0x130>
 48c:	8c 81       	ldd	r24, Y+4	; 0x04
 48e:	9d 81       	ldd	r25, Y+5	; 0x05
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	69 f0       	breq	.+26     	; 0x4ae <DIO_voidSetDirectionPin+0x148>
 494:	5f c0       	rjmp	.+190    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
 496:	2c 81       	ldd	r18, Y+4	; 0x04
 498:	3d 81       	ldd	r19, Y+5	; 0x05
 49a:	22 30       	cpi	r18, 0x02	; 2
 49c:	31 05       	cpc	r19, r1
 49e:	89 f1       	breq	.+98     	; 0x502 <DIO_voidSetDirectionPin+0x19c>
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	9d 81       	ldd	r25, Y+5	; 0x05
 4a4:	83 30       	cpi	r24, 0x03	; 3
 4a6:	91 05       	cpc	r25, r1
 4a8:	09 f4       	brne	.+2      	; 0x4ac <DIO_voidSetDirectionPin+0x146>
 4aa:	40 c0       	rjmp	.+128    	; 0x52c <DIO_voidSetDirectionPin+0x1c6>
 4ac:	53 c0       	rjmp	.+166    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
			{
			case DIO_PORTA:
				Clear_Bit(DDRA,Copy_u8Pin);
 4ae:	aa e3       	ldi	r26, 0x3A	; 58
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	ea e3       	ldi	r30, 0x3A	; 58
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	48 2f       	mov	r20, r24
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 2e       	mov	r0, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_voidSetDirectionPin+0x166>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_voidSetDirectionPin+0x162>
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	8c 93       	st	X, r24
 4d6:	3e c0       	rjmp	.+124    	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
				break;

			case DIO_PORTB:
				Clear_Bit(DDRB,Copy_u8Pin);
 4d8:	a7 e3       	ldi	r26, 0x37	; 55
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e7 e3       	ldi	r30, 0x37	; 55
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	48 2f       	mov	r20, r24
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 2e       	mov	r0, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_voidSetDirectionPin+0x190>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_voidSetDirectionPin+0x18c>
 4fa:	80 95       	com	r24
 4fc:	84 23       	and	r24, r20
 4fe:	8c 93       	st	X, r24
 500:	29 c0       	rjmp	.+82     	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
				break;

			case DIO_PORTC:
				Clear_Bit(DDRC,Copy_u8Pin);
 502:	a4 e3       	ldi	r26, 0x34	; 52
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e4 e3       	ldi	r30, 0x34	; 52
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_voidSetDirectionPin+0x1ba>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_voidSetDirectionPin+0x1b6>
 524:	80 95       	com	r24
 526:	84 23       	and	r24, r20
 528:	8c 93       	st	X, r24
 52a:	14 c0       	rjmp	.+40     	; 0x554 <DIO_voidSetDirectionPin+0x1ee>
				break;

			case DIO_PORTD:
				Clear_Bit(DDRD,Copy_u8Pin);
 52c:	a1 e3       	ldi	r26, 0x31	; 49
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	e1 e3       	ldi	r30, 0x31	; 49
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	48 2f       	mov	r20, r24
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 2e       	mov	r0, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_voidSetDirectionPin+0x1e4>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_voidSetDirectionPin+0x1e0>
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	8c 93       	st	X, r24

			default:
				break;
			 }
		}
}
 554:	27 96       	adiw	r28, 0x07	; 7
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <DIO_voidSetvaluePin>:

void DIO_voidSetvaluePin(u8 Copy_u8PORT , u8 Copy_u8Pin, u8 Copy_u8Value)
{
 566:	df 93       	push	r29
 568:	cf 93       	push	r28
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	27 97       	sbiw	r28, 0x07	; 7
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	89 83       	std	Y+1, r24	; 0x01
 57c:	6a 83       	std	Y+2, r22	; 0x02
 57e:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == HIGH)
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	09 f0       	breq	.+2      	; 0x588 <DIO_voidSetvaluePin+0x22>
 586:	6f c0       	rjmp	.+222    	; 0x666 <DIO_voidSetvaluePin+0x100>
		{
			switch (Copy_u8PORT)
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	3f 83       	std	Y+7, r19	; 0x07
 590:	2e 83       	std	Y+6, r18	; 0x06
 592:	8e 81       	ldd	r24, Y+6	; 0x06
 594:	9f 81       	ldd	r25, Y+7	; 0x07
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	91 05       	cpc	r25, r1
 59a:	49 f1       	breq	.+82     	; 0x5ee <DIO_voidSetvaluePin+0x88>
 59c:	2e 81       	ldd	r18, Y+6	; 0x06
 59e:	3f 81       	ldd	r19, Y+7	; 0x07
 5a0:	22 30       	cpi	r18, 0x02	; 2
 5a2:	31 05       	cpc	r19, r1
 5a4:	2c f4       	brge	.+10     	; 0x5b0 <DIO_voidSetvaluePin+0x4a>
 5a6:	8e 81       	ldd	r24, Y+6	; 0x06
 5a8:	9f 81       	ldd	r25, Y+7	; 0x07
 5aa:	00 97       	sbiw	r24, 0x00	; 0
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <DIO_voidSetvaluePin+0x60>
 5ae:	d2 c0       	rjmp	.+420    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
 5b0:	2e 81       	ldd	r18, Y+6	; 0x06
 5b2:	3f 81       	ldd	r19, Y+7	; 0x07
 5b4:	22 30       	cpi	r18, 0x02	; 2
 5b6:	31 05       	cpc	r19, r1
 5b8:	71 f1       	breq	.+92     	; 0x616 <DIO_voidSetvaluePin+0xb0>
 5ba:	8e 81       	ldd	r24, Y+6	; 0x06
 5bc:	9f 81       	ldd	r25, Y+7	; 0x07
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	91 05       	cpc	r25, r1
 5c2:	e9 f1       	breq	.+122    	; 0x63e <DIO_voidSetvaluePin+0xd8>
 5c4:	c7 c0       	rjmp	.+398    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
			{
			case DIO_PORTA:
				Set_Bit(PORTA,Copy_u8Pin);
 5c6:	ab e3       	ldi	r26, 0x3B	; 59
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	eb e3       	ldi	r30, 0x3B	; 59
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	48 2f       	mov	r20, r24
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 2e       	mov	r0, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_voidSetvaluePin+0x7e>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_voidSetvaluePin+0x7a>
 5e8:	84 2b       	or	r24, r20
 5ea:	8c 93       	st	X, r24
 5ec:	b3 c0       	rjmp	.+358    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
				break;

			case DIO_PORTB:
				Set_Bit(PORTB,Copy_u8Pin);
 5ee:	a8 e3       	ldi	r26, 0x38	; 56
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	e8 e3       	ldi	r30, 0x38	; 56
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 2e       	mov	r0, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_voidSetvaluePin+0xa6>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_voidSetvaluePin+0xa2>
 610:	84 2b       	or	r24, r20
 612:	8c 93       	st	X, r24
 614:	9f c0       	rjmp	.+318    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
				break;

			case DIO_PORTC:
				Set_Bit(PORTC,Copy_u8Pin);
 616:	a5 e3       	ldi	r26, 0x35	; 53
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	e5 e3       	ldi	r30, 0x35	; 53
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	48 2f       	mov	r20, r24
 622:	8a 81       	ldd	r24, Y+2	; 0x02
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 2e       	mov	r0, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_voidSetvaluePin+0xce>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_voidSetvaluePin+0xca>
 638:	84 2b       	or	r24, r20
 63a:	8c 93       	st	X, r24
 63c:	8b c0       	rjmp	.+278    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
				break;

			case DIO_PORTD:
				Set_Bit(PORTD,Copy_u8Pin);
 63e:	a2 e3       	ldi	r26, 0x32	; 50
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e2 e3       	ldi	r30, 0x32	; 50
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	48 2f       	mov	r20, r24
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 2e       	mov	r0, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_voidSetvaluePin+0xf6>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_voidSetvaluePin+0xf2>
 660:	84 2b       	or	r24, r20
 662:	8c 93       	st	X, r24
 664:	77 c0       	rjmp	.+238    	; 0x754 <DIO_voidSetvaluePin+0x1ee>

			default:
				break;
			}
		}
			else if (Copy_u8Value == LOW)
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 23       	and	r24, r24
 66a:	09 f0       	breq	.+2      	; 0x66e <DIO_voidSetvaluePin+0x108>
 66c:	73 c0       	rjmp	.+230    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
			{
				switch (Copy_u8PORT)
 66e:	89 81       	ldd	r24, Y+1	; 0x01
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	3d 83       	std	Y+5, r19	; 0x05
 676:	2c 83       	std	Y+4, r18	; 0x04
 678:	8c 81       	ldd	r24, Y+4	; 0x04
 67a:	9d 81       	ldd	r25, Y+5	; 0x05
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	91 05       	cpc	r25, r1
 680:	59 f1       	breq	.+86     	; 0x6d8 <DIO_voidSetvaluePin+0x172>
 682:	2c 81       	ldd	r18, Y+4	; 0x04
 684:	3d 81       	ldd	r19, Y+5	; 0x05
 686:	22 30       	cpi	r18, 0x02	; 2
 688:	31 05       	cpc	r19, r1
 68a:	2c f4       	brge	.+10     	; 0x696 <DIO_voidSetvaluePin+0x130>
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	9d 81       	ldd	r25, Y+5	; 0x05
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	69 f0       	breq	.+26     	; 0x6ae <DIO_voidSetvaluePin+0x148>
 694:	5f c0       	rjmp	.+190    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
 696:	2c 81       	ldd	r18, Y+4	; 0x04
 698:	3d 81       	ldd	r19, Y+5	; 0x05
 69a:	22 30       	cpi	r18, 0x02	; 2
 69c:	31 05       	cpc	r19, r1
 69e:	89 f1       	breq	.+98     	; 0x702 <DIO_voidSetvaluePin+0x19c>
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	9d 81       	ldd	r25, Y+5	; 0x05
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	91 05       	cpc	r25, r1
 6a8:	09 f4       	brne	.+2      	; 0x6ac <DIO_voidSetvaluePin+0x146>
 6aa:	40 c0       	rjmp	.+128    	; 0x72c <DIO_voidSetvaluePin+0x1c6>
 6ac:	53 c0       	rjmp	.+166    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
				{
				case DIO_PORTA:
					Clear_Bit(PORTA,Copy_u8Pin);
 6ae:	ab e3       	ldi	r26, 0x3B	; 59
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	eb e3       	ldi	r30, 0x3B	; 59
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	48 2f       	mov	r20, r24
 6ba:	8a 81       	ldd	r24, Y+2	; 0x02
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 2e       	mov	r0, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_voidSetvaluePin+0x166>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	0a 94       	dec	r0
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_voidSetvaluePin+0x162>
 6d0:	80 95       	com	r24
 6d2:	84 23       	and	r24, r20
 6d4:	8c 93       	st	X, r24
 6d6:	3e c0       	rjmp	.+124    	; 0x754 <DIO_voidSetvaluePin+0x1ee>
					break;

				case DIO_PORTB:
					Clear_Bit(PORTB,Copy_u8Pin);
 6d8:	a8 e3       	ldi	r26, 0x38	; 56
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e8 e3       	ldi	r30, 0x38	; 56
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	48 2f       	mov	r20, r24
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 2e       	mov	r0, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_voidSetvaluePin+0x190>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	0a 94       	dec	r0
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_voidSetvaluePin+0x18c>
 6fa:	80 95       	com	r24
 6fc:	84 23       	and	r24, r20
 6fe:	8c 93       	st	X, r24
 700:	29 c0       	rjmp	.+82     	; 0x754 <DIO_voidSetvaluePin+0x1ee>
					break;

				case DIO_PORTC:
					Clear_Bit(PORTC,Copy_u8Pin);
 702:	a5 e3       	ldi	r26, 0x35	; 53
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e5 e3       	ldi	r30, 0x35	; 53
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	48 2f       	mov	r20, r24
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 2e       	mov	r0, r18
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_voidSetvaluePin+0x1ba>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_voidSetvaluePin+0x1b6>
 724:	80 95       	com	r24
 726:	84 23       	and	r24, r20
 728:	8c 93       	st	X, r24
 72a:	14 c0       	rjmp	.+40     	; 0x754 <DIO_voidSetvaluePin+0x1ee>
					break;

				case DIO_PORTD:
					Clear_Bit(PORTD,Copy_u8Pin);
 72c:	a2 e3       	ldi	r26, 0x32	; 50
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	e2 e3       	ldi	r30, 0x32	; 50
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	48 2f       	mov	r20, r24
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 2e       	mov	r0, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_voidSetvaluePin+0x1e4>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_voidSetvaluePin+0x1e0>
 74e:	80 95       	com	r24
 750:	84 23       	and	r24, r20
 752:	8c 93       	st	X, r24

				default:
					break;
				 }
			}
}
 754:	27 96       	adiw	r28, 0x07	; 7
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	f8 94       	cli
 75a:	de bf       	out	0x3e, r29	; 62
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	cd bf       	out	0x3d, r28	; 61
 760:	cf 91       	pop	r28
 762:	df 91       	pop	r29
 764:	08 95       	ret

00000766 <DIO_voidPullUPPin>:

void DIO_voidPullUPPin(u8 Copy_u8PORT , u8 Copy_u8Pin)
{
 766:	df 93       	push	r29
 768:	cf 93       	push	r28
 76a:	00 d0       	rcall	.+0      	; 0x76c <DIO_voidPullUPPin+0x6>
 76c:	00 d0       	rcall	.+0      	; 0x76e <DIO_voidPullUPPin+0x8>
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	28 2f       	mov	r18, r24
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	3c 83       	std	Y+4, r19	; 0x04
 77e:	2b 83       	std	Y+3, r18	; 0x03
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	9c 81       	ldd	r25, Y+4	; 0x04
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	91 05       	cpc	r25, r1
 788:	09 f4       	brne	.+2      	; 0x78c <DIO_voidPullUPPin+0x26>
 78a:	3e c0       	rjmp	.+124    	; 0x808 <DIO_voidPullUPPin+0xa2>
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	3c 81       	ldd	r19, Y+4	; 0x04
 790:	22 30       	cpi	r18, 0x02	; 2
 792:	31 05       	cpc	r19, r1
 794:	2c f4       	brge	.+10     	; 0x7a0 <DIO_voidPullUPPin+0x3a>
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	9c 81       	ldd	r25, Y+4	; 0x04
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	71 f0       	breq	.+28     	; 0x7ba <DIO_voidPullUPPin+0x54>
 79e:	a8 c0       	rjmp	.+336    	; 0x8f0 <__stack+0x91>
 7a0:	2b 81       	ldd	r18, Y+3	; 0x03
 7a2:	3c 81       	ldd	r19, Y+4	; 0x04
 7a4:	22 30       	cpi	r18, 0x02	; 2
 7a6:	31 05       	cpc	r19, r1
 7a8:	09 f4       	brne	.+2      	; 0x7ac <DIO_voidPullUPPin+0x46>
 7aa:	55 c0       	rjmp	.+170    	; 0x856 <DIO_voidPullUPPin+0xf0>
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	9c 81       	ldd	r25, Y+4	; 0x04
 7b0:	83 30       	cpi	r24, 0x03	; 3
 7b2:	91 05       	cpc	r25, r1
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <DIO_voidPullUPPin+0x52>
 7b6:	76 c0       	rjmp	.+236    	; 0x8a4 <__stack+0x45>
 7b8:	9b c0       	rjmp	.+310    	; 0x8f0 <__stack+0x91>
	{
	case DIO_PORTA:
		Clear_Bit(DDRA,Copy_u8Pin);
 7ba:	aa e3       	ldi	r26, 0x3A	; 58
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	ea e3       	ldi	r30, 0x3A	; 58
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	48 2f       	mov	r20, r24
 7c6:	8a 81       	ldd	r24, Y+2	; 0x02
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_voidPullUPPin+0x70>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	2a 95       	dec	r18
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_voidPullUPPin+0x6c>
 7da:	80 95       	com	r24
 7dc:	84 23       	and	r24, r20
 7de:	8c 93       	st	X, r24
		Set_Bit(PINA,Copy_u8Pin);
 7e0:	a9 e3       	ldi	r26, 0x39	; 57
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e9 e3       	ldi	r30, 0x39	; 57
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	48 2f       	mov	r20, r24
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	28 2f       	mov	r18, r24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 2e       	mov	r0, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_voidPullUPPin+0x98>
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	0a 94       	dec	r0
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_voidPullUPPin+0x94>
 802:	84 2b       	or	r24, r20
 804:	8c 93       	st	X, r24
 806:	74 c0       	rjmp	.+232    	; 0x8f0 <__stack+0x91>
		break;

	case DIO_PORTB:
		Clear_Bit(DDRB,Copy_u8Pin);
 808:	a7 e3       	ldi	r26, 0x37	; 55
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	e7 e3       	ldi	r30, 0x37	; 55
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	48 2f       	mov	r20, r24
 814:	8a 81       	ldd	r24, Y+2	; 0x02
 816:	28 2f       	mov	r18, r24
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_voidPullUPPin+0xbe>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	2a 95       	dec	r18
 826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_voidPullUPPin+0xba>
 828:	80 95       	com	r24
 82a:	84 23       	and	r24, r20
 82c:	8c 93       	st	X, r24
		Set_Bit(PINB,Copy_u8Pin);
 82e:	a6 e3       	ldi	r26, 0x36	; 54
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	e6 e3       	ldi	r30, 0x36	; 54
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	48 2f       	mov	r20, r24
 83a:	8a 81       	ldd	r24, Y+2	; 0x02
 83c:	28 2f       	mov	r18, r24
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	02 2e       	mov	r0, r18
 846:	02 c0       	rjmp	.+4      	; 0x84c <DIO_voidPullUPPin+0xe6>
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	0a 94       	dec	r0
 84e:	e2 f7       	brpl	.-8      	; 0x848 <DIO_voidPullUPPin+0xe2>
 850:	84 2b       	or	r24, r20
 852:	8c 93       	st	X, r24
 854:	4d c0       	rjmp	.+154    	; 0x8f0 <__stack+0x91>
		break;

	case DIO_PORTC:
		Clear_Bit(DDRC,Copy_u8Pin);
 856:	a4 e3       	ldi	r26, 0x34	; 52
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	e4 e3       	ldi	r30, 0x34	; 52
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	80 81       	ld	r24, Z
 860:	48 2f       	mov	r20, r24
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	28 2f       	mov	r18, r24
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	2a 95       	dec	r18
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	80 95       	com	r24
 878:	84 23       	and	r24, r20
 87a:	8c 93       	st	X, r24
		Set_Bit(PINC,Copy_u8Pin);
 87c:	a3 e3       	ldi	r26, 0x33	; 51
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	e3 e3       	ldi	r30, 0x33	; 51
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	48 2f       	mov	r20, r24
 888:	8a 81       	ldd	r24, Y+2	; 0x02
 88a:	28 2f       	mov	r18, r24
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 2e       	mov	r0, r18
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	0a 94       	dec	r0
 89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
 89e:	84 2b       	or	r24, r20
 8a0:	8c 93       	st	X, r24
 8a2:	26 c0       	rjmp	.+76     	; 0x8f0 <__stack+0x91>
		break;

	case DIO_PORTD:
		Clear_Bit(DDRD,Copy_u8Pin);
 8a4:	a1 e3       	ldi	r26, 0x31	; 49
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	e1 e3       	ldi	r30, 0x31	; 49
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	48 2f       	mov	r20, r24
 8b0:	8a 81       	ldd	r24, Y+2	; 0x02
 8b2:	28 2f       	mov	r18, r24
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	2a 95       	dec	r18
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	80 95       	com	r24
 8c6:	84 23       	and	r24, r20
 8c8:	8c 93       	st	X, r24
		Set_Bit(PIND,Copy_u8Pin);
 8ca:	a0 e3       	ldi	r26, 0x30	; 48
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	e0 e3       	ldi	r30, 0x30	; 48
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	48 2f       	mov	r20, r24
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	28 2f       	mov	r18, r24
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	02 2e       	mov	r0, r18
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	0a 94       	dec	r0
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
 8ec:	84 2b       	or	r24, r20
 8ee:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	0f 90       	pop	r0
 8f8:	cf 91       	pop	r28
 8fa:	df 91       	pop	r29
 8fc:	08 95       	ret

000008fe <DIO_voidReadvaluePin>:

u8 DIO_voidReadvaluePin(u8 Copy_u8PORT , u8 Copy_u8Pin)
{
 8fe:	df 93       	push	r29
 900:	cf 93       	push	r28
 902:	00 d0       	rcall	.+0      	; 0x904 <DIO_voidReadvaluePin+0x6>
 904:	00 d0       	rcall	.+0      	; 0x906 <DIO_voidReadvaluePin+0x8>
 906:	0f 92       	push	r0
 908:	cd b7       	in	r28, 0x3d	; 61
 90a:	de b7       	in	r29, 0x3e	; 62
 90c:	8a 83       	std	Y+2, r24	; 0x02
 90e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Value;
	switch (Copy_u8PORT)
 910:	8a 81       	ldd	r24, Y+2	; 0x02
 912:	28 2f       	mov	r18, r24
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	3d 83       	std	Y+5, r19	; 0x05
 918:	2c 83       	std	Y+4, r18	; 0x04
 91a:	4c 81       	ldd	r20, Y+4	; 0x04
 91c:	5d 81       	ldd	r21, Y+5	; 0x05
 91e:	41 30       	cpi	r20, 0x01	; 1
 920:	51 05       	cpc	r21, r1
 922:	41 f1       	breq	.+80     	; 0x974 <DIO_voidReadvaluePin+0x76>
 924:	8c 81       	ldd	r24, Y+4	; 0x04
 926:	9d 81       	ldd	r25, Y+5	; 0x05
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	91 05       	cpc	r25, r1
 92c:	34 f4       	brge	.+12     	; 0x93a <DIO_voidReadvaluePin+0x3c>
 92e:	2c 81       	ldd	r18, Y+4	; 0x04
 930:	3d 81       	ldd	r19, Y+5	; 0x05
 932:	21 15       	cp	r18, r1
 934:	31 05       	cpc	r19, r1
 936:	61 f0       	breq	.+24     	; 0x950 <DIO_voidReadvaluePin+0x52>
 938:	52 c0       	rjmp	.+164    	; 0x9de <DIO_voidReadvaluePin+0xe0>
 93a:	4c 81       	ldd	r20, Y+4	; 0x04
 93c:	5d 81       	ldd	r21, Y+5	; 0x05
 93e:	42 30       	cpi	r20, 0x02	; 2
 940:	51 05       	cpc	r21, r1
 942:	51 f1       	breq	.+84     	; 0x998 <DIO_voidReadvaluePin+0x9a>
 944:	8c 81       	ldd	r24, Y+4	; 0x04
 946:	9d 81       	ldd	r25, Y+5	; 0x05
 948:	83 30       	cpi	r24, 0x03	; 3
 94a:	91 05       	cpc	r25, r1
 94c:	b9 f1       	breq	.+110    	; 0x9bc <DIO_voidReadvaluePin+0xbe>
 94e:	47 c0       	rjmp	.+142    	; 0x9de <DIO_voidReadvaluePin+0xe0>
	{
	case DIO_PORTA:
		Local_u8Value= Get_Bit(PINA,Copy_u8Pin);
 950:	e9 e3       	ldi	r30, 0x39	; 57
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	28 2f       	mov	r18, r24
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	8b 81       	ldd	r24, Y+3	; 0x03
 95c:	88 2f       	mov	r24, r24
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	a9 01       	movw	r20, r18
 962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_voidReadvaluePin+0x6a>
 964:	55 95       	asr	r21
 966:	47 95       	ror	r20
 968:	8a 95       	dec	r24
 96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_voidReadvaluePin+0x66>
 96c:	ca 01       	movw	r24, r20
 96e:	81 70       	andi	r24, 0x01	; 1
 970:	89 83       	std	Y+1, r24	; 0x01
 972:	35 c0       	rjmp	.+106    	; 0x9de <DIO_voidReadvaluePin+0xe0>
		break;

		case DIO_PORTB:
			Local_u8Value= Get_Bit(PINB,Copy_u8Pin);
 974:	e6 e3       	ldi	r30, 0x36	; 54
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	28 2f       	mov	r18, r24
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	8b 81       	ldd	r24, Y+3	; 0x03
 980:	88 2f       	mov	r24, r24
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	a9 01       	movw	r20, r18
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_voidReadvaluePin+0x8e>
 988:	55 95       	asr	r21
 98a:	47 95       	ror	r20
 98c:	8a 95       	dec	r24
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_voidReadvaluePin+0x8a>
 990:	ca 01       	movw	r24, r20
 992:	81 70       	andi	r24, 0x01	; 1
 994:	89 83       	std	Y+1, r24	; 0x01
 996:	23 c0       	rjmp	.+70     	; 0x9de <DIO_voidReadvaluePin+0xe0>
			break;

		case DIO_PORTC:
			Local_u8Value= Get_Bit(PINC,Copy_u8Pin);
 998:	e3 e3       	ldi	r30, 0x33	; 51
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	28 2f       	mov	r18, r24
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	8b 81       	ldd	r24, Y+3	; 0x03
 9a4:	88 2f       	mov	r24, r24
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	a9 01       	movw	r20, r18
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_voidReadvaluePin+0xb2>
 9ac:	55 95       	asr	r21
 9ae:	47 95       	ror	r20
 9b0:	8a 95       	dec	r24
 9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_voidReadvaluePin+0xae>
 9b4:	ca 01       	movw	r24, r20
 9b6:	81 70       	andi	r24, 0x01	; 1
 9b8:	89 83       	std	Y+1, r24	; 0x01
 9ba:	11 c0       	rjmp	.+34     	; 0x9de <DIO_voidReadvaluePin+0xe0>
			break;

		case DIO_PORTD:
			Local_u8Value= Get_Bit(PIND,Copy_u8Pin);
 9bc:	e0 e3       	ldi	r30, 0x30	; 48
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	80 81       	ld	r24, Z
 9c2:	28 2f       	mov	r18, r24
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	8b 81       	ldd	r24, Y+3	; 0x03
 9c8:	88 2f       	mov	r24, r24
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	a9 01       	movw	r20, r18
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <DIO_voidReadvaluePin+0xd6>
 9d0:	55 95       	asr	r21
 9d2:	47 95       	ror	r20
 9d4:	8a 95       	dec	r24
 9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <DIO_voidReadvaluePin+0xd2>
 9d8:	ca 01       	movw	r24, r20
 9da:	81 70       	andi	r24, 0x01	; 1
 9dc:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return Local_u8Value;
 9de:	89 81       	ldd	r24, Y+1	; 0x01
}
 9e0:	0f 90       	pop	r0
 9e2:	0f 90       	pop	r0
 9e4:	0f 90       	pop	r0
 9e6:	0f 90       	pop	r0
 9e8:	0f 90       	pop	r0
 9ea:	cf 91       	pop	r28
 9ec:	df 91       	pop	r29
 9ee:	08 95       	ret

000009f0 <INT_voidGlobalInterrupt>:


void (*INT0_CallBack)(void)=NULL;

void INT_voidGlobalInterrupt()
{
 9f0:	df 93       	push	r29
 9f2:	cf 93       	push	r28
 9f4:	cd b7       	in	r28, 0x3d	; 61
 9f6:	de b7       	in	r29, 0x3e	; 62
	/*Set in bit 7 in status register one to enable global interrupt*/
	Set_Bit(SREG,SREG_I);
 9f8:	af e5       	ldi	r26, 0x5F	; 95
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	ef e5       	ldi	r30, 0x5F	; 95
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	80 68       	ori	r24, 0x80	; 128
 a04:	8c 93       	st	X, r24
}
 a06:	cf 91       	pop	r28
 a08:	df 91       	pop	r29
 a0a:	08 95       	ret

00000a0c <INT0_voidInit>:

void INT0_voidInit()
{
 a0c:	df 93       	push	r29
 a0e:	cf 93       	push	r28
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
	/*interrupt on Falling Edge (Interrupt Request)*/
	Clear_Bit(MCUCR,MCUCR_ISC00);
 a14:	a5 e5       	ldi	r26, 0x55	; 85
 a16:	b0 e0       	ldi	r27, 0x00	; 0
 a18:	e5 e5       	ldi	r30, 0x55	; 85
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	8e 7f       	andi	r24, 0xFE	; 254
 a20:	8c 93       	st	X, r24
	Set_Bit(MCUCR,MCUCR_ISC01);
 a22:	a5 e5       	ldi	r26, 0x55	; 85
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	e5 e5       	ldi	r30, 0x55	; 85
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	82 60       	ori	r24, 0x02	; 2
 a2e:	8c 93       	st	X, r24

}
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <INT0_voidEnable>:

void INT0_voidEnable()
{
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
	/*INT0 Enable*/
	Set_Bit(GICR,GICR_INT0);
 a3e:	ab e5       	ldi	r26, 0x5B	; 91
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	eb e5       	ldi	r30, 0x5B	; 91
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	80 81       	ld	r24, Z
 a48:	80 64       	ori	r24, 0x40	; 64
 a4a:	8c 93       	st	X, r24
}
 a4c:	cf 91       	pop	r28
 a4e:	df 91       	pop	r29
 a50:	08 95       	ret

00000a52 <INT0_voidDisable>:

void INT0_voidDisable()
{
 a52:	df 93       	push	r29
 a54:	cf 93       	push	r28
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
	/*INT0 Disable*/
	Clear_Bit(GICR,GICR_INT0);
 a5a:	ab e5       	ldi	r26, 0x5B	; 91
 a5c:	b0 e0       	ldi	r27, 0x00	; 0
 a5e:	eb e5       	ldi	r30, 0x5B	; 91
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	8f 7b       	andi	r24, 0xBF	; 191
 a66:	8c 93       	st	X, r24
}
 a68:	cf 91       	pop	r28
 a6a:	df 91       	pop	r29
 a6c:	08 95       	ret

00000a6e <INT0_voidCallBack>:

void INT0_voidCallBack(void (*Local_voidINT0)(void))
{
 a6e:	df 93       	push	r29
 a70:	cf 93       	push	r28
 a72:	00 d0       	rcall	.+0      	; 0xa74 <INT0_voidCallBack+0x6>
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
 a78:	9a 83       	std	Y+2, r25	; 0x02
 a7a:	89 83       	std	Y+1, r24	; 0x01
	INT0_CallBack= Local_voidINT0;
 a7c:	89 81       	ldd	r24, Y+1	; 0x01
 a7e:	9a 81       	ldd	r25, Y+2	; 0x02
 a80:	90 93 61 00 	sts	0x0061, r25
 a84:	80 93 60 00 	sts	0x0060, r24
}
 a88:	0f 90       	pop	r0
 a8a:	0f 90       	pop	r0
 a8c:	cf 91       	pop	r28
 a8e:	df 91       	pop	r29
 a90:	08 95       	ret

00000a92 <__vector_1>:

void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
 a92:	1f 92       	push	r1
 a94:	0f 92       	push	r0
 a96:	0f b6       	in	r0, 0x3f	; 63
 a98:	0f 92       	push	r0
 a9a:	11 24       	eor	r1, r1
 a9c:	2f 93       	push	r18
 a9e:	3f 93       	push	r19
 aa0:	4f 93       	push	r20
 aa2:	5f 93       	push	r21
 aa4:	6f 93       	push	r22
 aa6:	7f 93       	push	r23
 aa8:	8f 93       	push	r24
 aaa:	9f 93       	push	r25
 aac:	af 93       	push	r26
 aae:	bf 93       	push	r27
 ab0:	ef 93       	push	r30
 ab2:	ff 93       	push	r31
 ab4:	df 93       	push	r29
 ab6:	cf 93       	push	r28
 ab8:	cd b7       	in	r28, 0x3d	; 61
 aba:	de b7       	in	r29, 0x3e	; 62
	INT0_CallBack();
 abc:	e0 91 60 00 	lds	r30, 0x0060
 ac0:	f0 91 61 00 	lds	r31, 0x0061
 ac4:	09 95       	icall
}
 ac6:	cf 91       	pop	r28
 ac8:	df 91       	pop	r29
 aca:	ff 91       	pop	r31
 acc:	ef 91       	pop	r30
 ace:	bf 91       	pop	r27
 ad0:	af 91       	pop	r26
 ad2:	9f 91       	pop	r25
 ad4:	8f 91       	pop	r24
 ad6:	7f 91       	pop	r23
 ad8:	6f 91       	pop	r22
 ada:	5f 91       	pop	r21
 adc:	4f 91       	pop	r20
 ade:	3f 91       	pop	r19
 ae0:	2f 91       	pop	r18
 ae2:	0f 90       	pop	r0
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	0f 90       	pop	r0
 ae8:	1f 90       	pop	r1
 aea:	18 95       	reti

00000aec <TIMER_voidInit>:
#include "TIMER_Interface.h"

void (*TIM)(void)=NULL;

void TIMER_voidInit(void)
{
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
	/*Select CTC Mode*/
	Set_Bit(TCCR0,TCCR0_WGM01);
 af4:	a3 e5       	ldi	r26, 0x53	; 83
 af6:	b0 e0       	ldi	r27, 0x00	; 0
 af8:	e3 e5       	ldi	r30, 0x53	; 83
 afa:	f0 e0       	ldi	r31, 0x00	; 0
 afc:	80 81       	ld	r24, Z
 afe:	88 60       	ori	r24, 0x08	; 8
 b00:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,TCCR0_WGM00);
 b02:	a3 e5       	ldi	r26, 0x53	; 83
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	e3 e5       	ldi	r30, 0x53	; 83
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	8f 7b       	andi	r24, 0xBF	; 191
 b0e:	8c 93       	st	X, r24

	/*Select Prescaler CLK/8*/
	TCCR0 &= (0b11111000);
 b10:	a3 e5       	ldi	r26, 0x53	; 83
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	e3 e5       	ldi	r30, 0x53	; 83
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	80 81       	ld	r24, Z
 b1a:	88 7f       	andi	r24, 0xF8	; 248
 b1c:	8c 93       	st	X, r24
	TCCR0 |= (0b00000010);
 b1e:	a3 e5       	ldi	r26, 0x53	; 83
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	e3 e5       	ldi	r30, 0x53	; 83
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
 b28:	82 60       	ori	r24, 0x02	; 2
 b2a:	8c 93       	st	X, r24

	/*set Max Value for timer*/
	OCR0 = 200;
 b2c:	ec e5       	ldi	r30, 0x5C	; 92
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	88 ec       	ldi	r24, 0xC8	; 200
 b32:	80 83       	st	Z, r24

	/*Enable Interrupt*/
	Set_Bit(TIMSK,TIMSK_OCIE0);
 b34:	a9 e5       	ldi	r26, 0x59	; 89
 b36:	b0 e0       	ldi	r27, 0x00	; 0
 b38:	e9 e5       	ldi	r30, 0x59	; 89
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	80 81       	ld	r24, Z
 b3e:	82 60       	ori	r24, 0x02	; 2
 b40:	8c 93       	st	X, r24
}
 b42:	cf 91       	pop	r28
 b44:	df 91       	pop	r29
 b46:	08 95       	ret

00000b48 <Timer_voidDelayms>:

void Timer_voidDelayms (u32 Copy_Delayu32ms)
{
 b48:	ef 92       	push	r14
 b4a:	ff 92       	push	r15
 b4c:	0f 93       	push	r16
 b4e:	1f 93       	push	r17
 b50:	df 93       	push	r29
 b52:	cf 93       	push	r28
 b54:	00 d0       	rcall	.+0      	; 0xb56 <Timer_voidDelayms+0xe>
 b56:	00 d0       	rcall	.+0      	; 0xb58 <Timer_voidDelayms+0x10>
 b58:	00 d0       	rcall	.+0      	; 0xb5a <Timer_voidDelayms+0x12>
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
 b5e:	6b 83       	std	Y+3, r22	; 0x03
 b60:	7c 83       	std	Y+4, r23	; 0x04
 b62:	8d 83       	std	Y+5, r24	; 0x05
 b64:	9e 83       	std	Y+6, r25	; 0x06
	u16 Local_u16Counter; /*Local variable to counts number of Captures*/

	/*Select CTC Mode*/
	Set_Bit(TCCR0,TCCR0_WGM01);
 b66:	a3 e5       	ldi	r26, 0x53	; 83
 b68:	b0 e0       	ldi	r27, 0x00	; 0
 b6a:	e3 e5       	ldi	r30, 0x53	; 83
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	88 60       	ori	r24, 0x08	; 8
 b72:	8c 93       	st	X, r24
	Clear_Bit(TCCR0,TCCR0_WGM00);
 b74:	a3 e5       	ldi	r26, 0x53	; 83
 b76:	b0 e0       	ldi	r27, 0x00	; 0
 b78:	e3 e5       	ldi	r30, 0x53	; 83
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	8f 7b       	andi	r24, 0xBF	; 191
 b80:	8c 93       	st	X, r24

	/*set Max Value for timer*/
	OCR0 = 200;
 b82:	ec e5       	ldi	r30, 0x5C	; 92
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	88 ec       	ldi	r24, 0xC8	; 200
 b88:	80 83       	st	Z, r24

	/*Clear flag*/
	Set_Bit(TIFR,TIFR_OCF0);
 b8a:	a8 e5       	ldi	r26, 0x58	; 88
 b8c:	b0 e0       	ldi	r27, 0x00	; 0
 b8e:	e8 e5       	ldi	r30, 0x58	; 88
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	80 81       	ld	r24, Z
 b94:	82 60       	ori	r24, 0x02	; 2
 b96:	8c 93       	st	X, r24

	/*Select Prescaler CLK/8*/
	TCCR0 &= (0b11111000);
 b98:	a3 e5       	ldi	r26, 0x53	; 83
 b9a:	b0 e0       	ldi	r27, 0x00	; 0
 b9c:	e3 e5       	ldi	r30, 0x53	; 83
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	80 81       	ld	r24, Z
 ba2:	88 7f       	andi	r24, 0xF8	; 248
 ba4:	8c 93       	st	X, r24
	TCCR0 |= (0b00000010);
 ba6:	a3 e5       	ldi	r26, 0x53	; 83
 ba8:	b0 e0       	ldi	r27, 0x00	; 0
 baa:	e3 e5       	ldi	r30, 0x53	; 83
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	80 81       	ld	r24, Z
 bb0:	82 60       	ori	r24, 0x02	; 2
 bb2:	8c 93       	st	X, r24

	for (Local_u16Counter=1;Local_u16Counter<=5*Copy_Delayu32ms;Local_u16Counter++)
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	9a 83       	std	Y+2, r25	; 0x02
 bba:	89 83       	std	Y+1, r24	; 0x01
 bbc:	16 c0       	rjmp	.+44     	; 0xbea <Timer_voidDelayms+0xa2>
	{
		while (Get_Bit(TIFR,TIFR_OCF0)!=1); /*Polling for the flag*/
 bbe:	e8 e5       	ldi	r30, 0x58	; 88
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	80 81       	ld	r24, Z
 bc4:	86 95       	lsr	r24
 bc6:	88 2f       	mov	r24, r24
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	81 70       	andi	r24, 0x01	; 1
 bcc:	90 70       	andi	r25, 0x00	; 0
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	b1 f3       	breq	.-20     	; 0xbbe <Timer_voidDelayms+0x76>
		Set_Bit(TIFR,TIFR_OCF0);            /*Clear flag*/
 bd2:	a8 e5       	ldi	r26, 0x58	; 88
 bd4:	b0 e0       	ldi	r27, 0x00	; 0
 bd6:	e8 e5       	ldi	r30, 0x58	; 88
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	80 81       	ld	r24, Z
 bdc:	82 60       	ori	r24, 0x02	; 2
 bde:	8c 93       	st	X, r24

	/*Select Prescaler CLK/8*/
	TCCR0 &= (0b11111000);
	TCCR0 |= (0b00000010);

	for (Local_u16Counter=1;Local_u16Counter<=5*Copy_Delayu32ms;Local_u16Counter++)
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	01 96       	adiw	r24, 0x01	; 1
 be6:	9a 83       	std	Y+2, r25	; 0x02
 be8:	89 83       	std	Y+1, r24	; 0x01
 bea:	89 81       	ldd	r24, Y+1	; 0x01
 bec:	9a 81       	ldd	r25, Y+2	; 0x02
 bee:	7c 01       	movw	r14, r24
 bf0:	00 e0       	ldi	r16, 0x00	; 0
 bf2:	10 e0       	ldi	r17, 0x00	; 0
 bf4:	2b 81       	ldd	r18, Y+3	; 0x03
 bf6:	3c 81       	ldd	r19, Y+4	; 0x04
 bf8:	4d 81       	ldd	r20, Y+5	; 0x05
 bfa:	5e 81       	ldd	r21, Y+6	; 0x06
 bfc:	da 01       	movw	r26, r20
 bfe:	c9 01       	movw	r24, r18
 c00:	88 0f       	add	r24, r24
 c02:	99 1f       	adc	r25, r25
 c04:	aa 1f       	adc	r26, r26
 c06:	bb 1f       	adc	r27, r27
 c08:	88 0f       	add	r24, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	aa 1f       	adc	r26, r26
 c0e:	bb 1f       	adc	r27, r27
 c10:	82 0f       	add	r24, r18
 c12:	93 1f       	adc	r25, r19
 c14:	a4 1f       	adc	r26, r20
 c16:	b5 1f       	adc	r27, r21
 c18:	8e 15       	cp	r24, r14
 c1a:	9f 05       	cpc	r25, r15
 c1c:	a0 07       	cpc	r26, r16
 c1e:	b1 07       	cpc	r27, r17
 c20:	70 f6       	brcc	.-100    	; 0xbbe <Timer_voidDelayms+0x76>
	{
		while (Get_Bit(TIFR,TIFR_OCF0)!=1); /*Polling for the flag*/
		Set_Bit(TIFR,TIFR_OCF0);            /*Clear flag*/
	}
}
 c22:	26 96       	adiw	r28, 0x06	; 6
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	f8 94       	cli
 c28:	de bf       	out	0x3e, r29	; 62
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	cd bf       	out	0x3d, r28	; 61
 c2e:	cf 91       	pop	r28
 c30:	df 91       	pop	r29
 c32:	1f 91       	pop	r17
 c34:	0f 91       	pop	r16
 c36:	ff 90       	pop	r15
 c38:	ef 90       	pop	r14
 c3a:	08 95       	ret

00000c3c <main>:
 */

#include "App.h"

int main (void)
{
 c3c:	df 93       	push	r29
 c3e:	cf 93       	push	r28
 c40:	cd b7       	in	r28, 0x3d	; 61
 c42:	de b7       	in	r29, 0x3e	; 62
	AppInit();
 c44:	0e 94 3e 00 	call	0x7c	; 0x7c <AppInit>

	while (1)
	{
		AppStart();
 c48:	0e 94 7b 00 	call	0xf6	; 0xf6 <AppStart>
 c4c:	fd cf       	rjmp	.-6      	; 0xc48 <main+0xc>

00000c4e <_exit>:
 c4e:	f8 94       	cli

00000c50 <__stop_program>:
 c50:	ff cf       	rjmp	.-2      	; 0xc50 <__stop_program>
